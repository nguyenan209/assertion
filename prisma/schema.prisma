generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  members       Member[]
  comments      Comment[]
  history       History[]
}

model Account {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  userId            String    @db.ObjectId
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String    @unique
  userId       String    @db.ObjectId
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Project {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  code        String    @unique
  name        String
  description String?
  icon        String?
  color       String?
  status      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  phases      Phase[]
  epics       Epic[]
  sprints     Sprint[]
  issues      Issue[]
  members     Member[]
}

model Phase {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  projectId   String    @db.ObjectId
  project     Project   @relation(fields: [projectId], references: [id])
  name        String
  startDate   DateTime
  endDate     DateTime
  platforms   String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Epic {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  projectId   String    @db.ObjectId
  project     Project   @relation(fields: [projectId], references: [id])
  name        String
  description String?
  platforms   String[]
  issues      Issue[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Sprint {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  projectId   String    @db.ObjectId
  project     Project   @relation(fields: [projectId], references: [id])
  name        String
  startDate   DateTime
  endDate     DateTime
  status      String
  issues      Issue[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Issue {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  projectId      String         @db.ObjectId
  project        Project        @relation(fields: [projectId], references: [id])
  sprintId       String?        @db.ObjectId
  sprint         Sprint?        @relation(fields: [sprintId], references: [id])
  epicId         String?        @db.ObjectId
  epic           Epic?          @relation(fields: [epicId], references: [id])
  issueId        String         @unique
  type           String
  status         String
  workflow       String?
  priority       String
  platforms      String[]
  summary        String
  description    String?
  steps          String?
  actualResult   String?
  expectedResult String?
  occurrence     String?
  reporterId     String         @db.ObjectId
  reporter       Member         @relation("Reporter", fields: [reporterId], references: [id])
  assigneeId     String?        @db.ObjectId
  assignee       Member?        @relation("Assignee", fields: [assigneeId], references: [id])
  followers      IssueFollower[] // Thay đổi thành quan hệ thông qua bảng trung gian
  attachments    String[]
  comments       Comment[]
  history        History[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Comment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  issueId     String    @db.ObjectId
  issue       Issue     @relation(fields: [issueId], references: [id])
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model History {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  issueId     String    @db.ObjectId
  issue       Issue     @relation(fields: [issueId], references: [id])
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  field       String
  oldValue    String?
  newValue    String?
  createdAt   DateTime  @default(now())
}

model Member {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  projectId      String         @db.ObjectId
  project        Project        @relation(fields: [projectId], references: [id])
  userId         String         @db.ObjectId
  user           User           @relation(fields: [userId], references: [id])
  roleId         String         @db.ObjectId
  role           Role           @relation(fields: [roleId], references: [id])
  reportedIssues Issue[]        @relation("Reporter")
  assignedIssues Issue[]        @relation("Assignee")
  followedIssues IssueFollower[] // Thay đổi thành quan hệ thông qua bảng trung gian
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Role {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  permissions String[]
  members     Member[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Model trung gian cho quan hệ nhiều-nhiều giữa Issue và Member
model IssueFollower {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  issueId   String  @db.ObjectId
  memberId  String  @db.ObjectId
  issue     Issue   @relation(fields: [issueId], references: [id])
  member    Member  @relation(fields: [memberId], references: [id])
  createdAt DateTime @default(now())

  @@unique([issueId, memberId]) // Đảm bảo không có trùng lặp
}